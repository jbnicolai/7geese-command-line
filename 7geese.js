// Generated by CoffeeScript 1.6.3
(function() {
  var chalk, fs, inquirer, program, request, _;

  chalk = require('chalk');

  program = require('commander');

  inquirer = require('inquirer');

  request = require('request');

  fs = require('fs');

  _ = require('underscore');

  module.exports = function() {
    var app, connectTo7GeeseOauth, connectedUser, error, getCheckinMessage, getFormattedValue, inputKeyresultValues, keyresults, loadObjectives, saveCheckin, selectObjective, success;
    success = chalk.bold.green;
    error = chalk.bold.red;
    app = {
      config: {
        baseUrl: 'https://www.7geese.com',
        oauth: null
      },
      oauth: null
    };
    getFormattedValue = function(value, type) {
      if (type === 1) {
        return value + '%';
      } else if (type === 2) {
        return '$' + value;
      } else if (type === 4) {
        return value + '€';
      } else if (type === 5) {
        return value + '¥';
      } else if (type === 6) {
        return value + '£';
      } else {
        return value;
      }
    };
    console.log(chalk.bold.bgGreen("=== Welcome to the 7Geese command line utility ==="));
    console.log("\n");
    keyresults = function(val) {
      return val.split(',');
    };
    program.version('0.0.1').option('-m, --message <n>', 'Add a message').option('-o, --objective <n>', 'Add an objective id', parseInt).option('-k, --keyresults <items>', 'Add a key result value id:value,id:value', keyresults).parse(process.argv);
    connectedUser = function(callback) {
      return fs.readFile('./config.json', 'utf-8', function(err, data) {
        var e, _ref;
        try {
          data = JSON.parse(data);
        } catch (_error) {
          e = _error;
          data = {};
        }
        if (data.config == null) {
          console.log("You need to enter the information of your application: https://www.7geese.com/account/applications/");
          return inquirer.prompt([
            {
              type: 'input',
              name: 'client_id',
              message: "Please enter the client id of your 7geese application:"
            }, {
              type: 'input',
              name: 'client_secret',
              message: "Please enter the client secret of your 7geese application:"
            }
          ], function(answers) {
            app.config.oauth.client_id = answers.client_id;
            app.config.oauth.client_secret = answers.client_secret;
            fs.writeFileSync("./config.json", JSON.stringify(app));
            return connectTo7GeeseOauth(function() {
              return callback();
            });
          });
        } else if (err || (((_ref = data.oauth) != null ? _ref.access_token : void 0) == null)) {
          console.log("User does not have any configuration file.");
          return connectTo7GeeseOauth(function() {
            return callback();
          });
        } else {
          app.oauth = data.oauth;
          return callback();
        }
      });
    };
    connectTo7GeeseOauth = function(callback) {
      return inquirer.prompt([
        {
          type: 'input',
          name: 'email',
          message: "Please enter your email:"
        }, {
          type: 'password',
          name: 'password',
          message: "Please enter your password:"
        }
      ], function(answers) {
        var data, url;
        url = "" + app.config.baseUrl + "/oauth2/access_token/";
        data = {
          grant_type: 'password',
          client_id: app.config.oauth.client_id,
          client_secret: app.config.oauth.client_secret,
          username: answers.email,
          password: answers.password,
          scope: 'all'
        };
        return request.post(url, {
          form: data
        }, function(error, response, body) {
          if (!error) {
            app.oauth = JSON.parse(body);
            fs.writeFileSync("./config.json", JSON.stringify(app));
            if (callback != null) {
              return callback();
            }
          } else {
            return console.log(error("\nError: The email or password seems wrong, please try again."));
          }
        });
      });
    };
    loadObjectives = function() {
      request("" + app.config.baseUrl + "/api/v1/objectives/?closed=false&limit=0&oauth_consumer_key=" + app.oauth.access_token, function(error, response, body) {
        var data;
        if (!error) {
          data = JSON.parse(body);
          return selectObjective(data.objects);
        } else {
          return console.log(chalk.bold.red("Error: Can not load your objectives."));
        }
      });
      return console.log("Loading your objectives...");
    };
    selectObjective = function(objectives) {
      var data;
      data = _.filter(objectives, function(objective) {
        return objective.participant_type === 1;
      });
      console.log("\n");
      return inquirer.prompt([
        {
          type: 'list',
          name: 'objective',
          message: "Select an objective:",
          choices: _.map(data, function(objective) {
            return {
              name: objective.name,
              value: objective.id
            };
          })
        }
      ], function(answers) {
        return inputKeyresultValues(answers.objective);
      });
    };
    inputKeyresultValues = function(id) {
      return request("" + app.config.baseUrl + "/api/v1/objectivekeyresults/?objective=" + id + "&oauth_consumer_key=" + app.oauth.access_token, function(error, response, body) {
        var data, questions;
        if (!error) {
          data = JSON.parse(body);
          questions = _.map(data.objects, function(kr) {
            return {
              type: 'input',
              name: kr.resource_uri,
              "default": kr.current_value,
              message: "Update the progress of the key result: \"" + kr.name + "\" (" + (getFormattedValue(kr.current_value, kr.measurement_type)) + "/" + (getFormattedValue(kr.target_value, kr.measurement_type)) + ")"
            };
          });
          return inquirer.prompt(questions, function(answers) {
            return getCheckinMessage(id, answers);
          });
        } else {
          return console.log(chalk.bold.red("Error: Can not load your objectives."));
        }
      });
    };
    getCheckinMessage = function(id, keyresults) {
      return inquirer.prompt([
        {
          name: 'message',
          type: 'input',
          message: 'Enter a check-in message:'
        }
      ], function(answers) {
        return saveCheckin(id, keyresults, answers.message);
      });
    };
    saveCheckin = function(id, keyresults, message) {
      var k, krs;
      krs = [];
      _.each(keyresults, function(kr, i) {
        var key;
        key = i.split('/')[4];
        return krs.push("" + key + ":" + kr);
      });
      k = krs.join(',');
      console.log("\nExecuting command: 7geese --objective " + id + " --message \"" + message + "\" --keyresults \"" + k + "\"\n");
      return request({
        url: "" + app.config.baseUrl + "/api/v1/objectives/" + id + "/checkins/?oauth_consumer_key=" + app.oauth.access_token,
        method: 'post',
        json: true,
        body: {
          tagged_users: null,
          key_results: _.map(keyresults, function(kr, i) {
            return {
              resource_uri: i,
              current_value: parseInt(kr, 10)
            };
          }),
          message: message
        }
      }, function(error, response, body) {
        if (!error) {
          return console.log(success("Your check-in has been saved."));
        } else {
          return console.log(chalk.bold.red("Error: Can not save your checkin."));
        }
      });
    };
    console.log('7geese');
    return connectedUser(function() {
      var krs;
      if (program.objective && program.message) {
        krs = {};
        _.each(program.keyresults, function(kr) {
          return krs["/api/v1/objectivekeyresults/" + (kr.split(':')[0]) + "/"] = kr.split(':')[1];
        });
        return saveCheckin(program.objective, krs, program.message);
      } else {
        return loadObjectives();
      }
    });
  };

}).call(this);
